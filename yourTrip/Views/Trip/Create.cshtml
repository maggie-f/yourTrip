@model yourTrip.Models.TripModels

@{
    ViewBag.Title = "Create";
    ViewBag.Latitud = "15";
    ViewBag.Longitud = "0";
    ViewBag.Zoom = "1";
    ViewBag.Error = ViewBag.HasErrors ? "display:block;" : "display:none;";
}
<div class="container body-content">
    <h2>First step to plan your trip</h2>

    <div class="row">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

        <div class="col-lg-5 col-md-5 col-sm-12 col-xs-12 form-horizontal">
            <hr />
            @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Latitud, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Latitud, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Longitud, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Longitud, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

            @Html.ValidationMessageFor(model => model.Longitud, "", new { @class = "text-danger" })
            @Html.ValidationMessageFor(model => model.Latitud, "", new { @class = "text-danger" })
            *@
            <div class="form-group">
                @Html.LabelFor(model => model.Departure, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Departure, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            @Html.HiddenFor(model => model.PlaceId, htmlAttributes: new { @id = "placeId", @value = "" })
            @Html.HiddenFor(model => model.Latitud, htmlAttributes: new { @id = "latitud", @value = "" })
            @Html.HiddenFor(model => model.Longitud, htmlAttributes: new { @id = "longitud", @value = "" })

            <div class="form-group">
                @Html.LabelFor(model => model.Destination, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div id="locationField">
                        @*<input id="autocomplete" placeholder="Witch city are you going?" type="text" />*@
                        @Html.EditorFor(model => model.Destination, new { htmlAttributes = new { @id = "autocomplete", @class = "form-control controls", @type = "text", placeholder = "Witch city are you going?" } })

                    </div>
         
                    <div id="map"></div>

                </div>
            </div>

            <div class="alert alert-danger alert-dismissible" role="alert" style="@ViewBag.Error">
                @Html.ValidationMessageFor(model => model.Destination, "", new { @class = "text-danger" })
                @Html.ValidationMessageFor(model => model.Departure, "", new { @class = "text-danger" })
            </div>
            @ViewBag.InnerException

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
        }

        <div class="col-lg-5 col-md-5 col-sm-12 col-xs-12">
            <div id="mapsImages"></div>
        </div>
    </div>
    

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    <!-- Maps Stuff --> 
    <div id="listing">
        <table id="resultsTable">
            <tbody id="results"></tbody>
        </table>
    </div>

    <div style="display: none">
        <div id="info-content">
            <table>
                <tr id="iw-url-row" class="iw_table_row">
                    <td id="iw-icon" class="iw_table_icon"></td>
                    <td id="iw-url"></td>
                </tr>
                <tr id="iw-address-row" class="iw_table_row">
                    <td class="iw_attribute_name">Address:</td>
                    <td id="iw-address"></td>
                </tr>
                <tr id="iw-phone-row" class="iw_table_row">
                    <td class="iw_attribute_name">Telephone:</td>
                    <td id="iw-phone"></td>
                </tr>
                <tr id="iw-rating-row" class="iw_table_row">
                    <td class="iw_attribute_name">Rating:</td>
                    <td id="iw-rating"></td>
                </tr>
                <tr id="iw-website-row" class="iw_table_row">
                    <td class="iw_attribute_name">Website:</td>
                    <td id="iw-website"></td>
                </tr>
            </table>
        </div>
    </div>

    <script type="text/javascript">
    var map, places, infoWindow, place, marker;
    var markers = [];
    var autocomplete;
    var MARKER_PATH = 'https://developers.google.com/maps/documentation/javascript/images/marker_green';
    var hostnameRegexp = new RegExp('^https?://.+?/');

    function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
        zoom: @ViewBag.Zoom,
        center: { lat: @ViewBag.Latitud, lng: @ViewBag.Longitud },
        mapTypeControl: false,
        panControl: false,
        zoomControl: true,
        streetViewControl: false
    });

    infoWindow = new google.maps.InfoWindow({
        content: document.getElementById('info-content')
    });

    // Create the autocomplete object and associate it with the UI input control.
    // Restrict the search to the default country, and to place type "cities".
    autocomplete = new google.maps.places.Autocomplete(
        /** type {!HTMLInputElement} */
        (document.getElementById('autocomplete')), {
            types: ['(cities)']
        });
    places = new google.maps.places.PlacesService(map);

    autocomplete.addListener('place_changed', onPlaceChanged);

    // Add a DOM event listener to react when the user selects a country.
    //document.getElementById('country').addEventListener('change', setAutocompleteCountry);
    }

    function toggleBounce() {
        if (marker.getAnimation() !== null) {
            marker.setAnimation(null);
        } else {
            marker.setAnimation(google.maps.Animation.BOUNCE);
        }
    }

    function putPin(place) {
        clearResults();
        clearMarkers();

        map.zoom = 11;

        marker = new google.maps.Marker({
            map: map,
            draggable: true,
            animation: google.maps.Animation.DROP,
            position: { lat: place.geometry.location.lat(), lng: place.geometry.location.lng() }
        });
        marker.addListener('click', showInfoWindow);
    }

    function putImages(place) {
        //var images = [];
        //for (i = 0; i <= place.photos.length; i++){
        //    var image = document.createElement("img");
        //    image.setAttribute("src", place.photos.);
        //}
        }
        function completeData(place) {
            var placeId = document.getElementById("placeId");
            placeId.value = place.place_id;

            var latitud = document.getElementById("latitud");
            latitud.value = place.geometry.location.lat();

            var longitud = document.getElementById("longitud");
            longitud.value = place.geometry.location.lng();
        }

    // When the user selects a city, get the place details for the city and
    // zoom the map in on the city.
    function onPlaceChanged() {
        place = null;
        place = autocomplete.getPlace();
        if (place.geometry) {
            map.panTo(place.geometry.location);
            map.zoom = 11;
            putPin(place);
            putImages(place);
            completeData(place);
            //map.setZoom();
            //search();
        } else {
            document.getElementById('autocomplete').placeholder = 'Witch city are you going?';
        }
    }

    // Search for hotels in the selected city, within the viewport of the map.
    function search() {
    var search = {
        bounds: map.getBounds(),
        types: ['lodging']
    };

    places.nearbySearch(search, function(results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
        clearResults();
        clearMarkers();
        // Create a marker for each hotel found, and
        // assign a letter of the alphabetic to each marker icon.
        for (var i = 0; i < results.length; i++) {
            var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));
            var markerIcon = MARKER_PATH + markerLetter + '.png';
            // Use marker animation to drop the icons incrementally on the map.
            markers[i] = new google.maps.Marker({
            position: results[i].geometry.location,
            animation: google.maps.Animation.DROP,
            icon: markerIcon
            });
            // If the user clicks a hotel marker, show the details of that hotel
            // in an info window.
            markers[i].placeResult = results[i];
            google.maps.event.addListener(markers[i], 'click', showInfoWindow);
            setTimeout(dropMarker(i), i * 100);
            addResult(results[i], i);
        }
        }
    });
    }

    function clearMarkers() {
    for (var i = 0; i < markers.length; i++) {
        if (markers[i]) {
        markers[i].setMap(null);
        }
    }
    markers = [];
    }

    // Set the country restriction based on user input.
    // Also center and zoom the map on the given country.
        function setAutocompleteCountry() {
        var country = document.getElementById('country').value;
        autocomplete.setComponentRestrictions({ 'country': [] });
        map.setCenter({ lat: 15, lng: 0 });
        map.setZoom(2);

        //if (country == 'all') {
        //  autocomplete.setComponentRestrictions({'country': []});
        //  map.setCenter({lat: 15, lng: 0});
        //  map.setZoom(2);
        //} else {
        //  autocomplete.setComponentRestrictions({'country': country});
        //  map.setCenter(countries[country].center);
        //  map.setZoom(countries[country].zoom);
        //}
        clearResults();
        clearMarkers();
        }

        function dropMarker(i) {
        return function() {
            markers[i].setMap(map);
        };
        }

        function addResult(result, i) {
        var results = document.getElementById('results');
        var markerLetter = String.fromCharCode('A'.charCodeAt(0) + (i % 26));
        var markerIcon = MARKER_PATH + markerLetter + '.png';

        var tr = document.createElement('tr');
        tr.style.backgroundColor = (i % 2 === 0 ? '#F0F0F0' : '#FFFFFF');
        tr.onclick = function() {
            google.maps.event.trigger(markers[i], 'click');
        };

        var iconTd = document.createElement('td');
        var nameTd = document.createElement('td');
        var icon = document.createElement('img');
        icon.src = markerIcon;
        icon.setAttribute('class', 'placeIcon');
        icon.setAttribute('className', 'placeIcon');
        var name = document.createTextNode(result.name);
        iconTd.appendChild(icon);
        nameTd.appendChild(name);
        tr.appendChild(iconTd);
        tr.appendChild(nameTd);
        results.appendChild(tr);
        }

        function clearResults() {
        var results = document.getElementById('results');
        while (results.childNodes[0]) {
            results.removeChild(results.childNodes[0]);
        }
        }

        // Get the place details for a hotel. Show the information in an info window,
        // anchored on the marker for the hotel that the user selected.
        function showInfoWindow() {
        var marker = this;
        places.getDetails({placeId: marker.placeResult.place_id},
            function(place, status) {
                if (status !== google.maps.places.PlacesServiceStatus.OK) {
                return;
                }
                infoWindow.open(map, marker);
                buildIWContent(place);
            });
        }

        // Load the place information into the HTML elements used by the info window.
        function buildIWContent(place) {
            document.getElementById('iw-icon').innerHTML = '<img class="hotelIcon" ' +
                'src="' + place.icon + '"/>';
            document.getElementById('iw-url').innerHTML = '<b><a href="' + place.url +
                '">' + place.name + '</a></b>';
            document.getElementById('iw-address').textContent = place.vicinity;

            if (place.formatted_phone_number) {
                document.getElementById('iw-phone-row').style.display = '';
                document.getElementById('iw-phone').textContent =
                    place.formatted_phone_number;
            } else {
                document.getElementById('iw-phone-row').style.display = 'none';
            }

            // Assign a five-star rating to the hotel, using a black star ('&#10029;')
            // to indicate the rating the hotel has earned, and a white star ('&#10025;')
            // for the rating points not achieved.
            if (place.rating) {
                var ratingHtml = '';
                for (var i = 0; i < 5; i++) {
                if (place.rating < (i + 0.5)) {
                    ratingHtml += '&#10025;';
                } else {
                    ratingHtml += '&#10029;';
                }
                document.getElementById('iw-rating-row').style.display = '';
                document.getElementById('iw-rating').innerHTML = ratingHtml;
                }
            } else {
                document.getElementById('iw-rating-row').style.display = 'none';
            }

            // The regexp isolates the first part of the URL (domain plus subdomain)
            // to give a short URL for displaying in the info window.
            if (place.website) {
                var fullUrl = place.website;
                var website = hostnameRegexp.exec(place.website);
                if (website === null) {
                website = 'http://' + place.website + '/';
                fullUrl = website;
                }
                document.getElementById('iw-website-row').style.display = '';
                document.getElementById('iw-website').textContent = website;
            } else {
                document.getElementById('iw-website-row').style.display = 'none';
            }
        }
    </script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCFigjZClvz9N8z4KeZpBJyCm1eM_A3-nw&libraries=places&callback=initMap" async defer></script>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}